generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  externalUserId String   @unique
  imageUrl       String
  blockedBy      Block[]  @relation("BlockedBy")
  blocking       Block[]  @relation("Blocking")
  following      Follow[] @relation("Following")
  followedBy     Follow[] @relation("FollowedBy")
  stream         Stream?
}

model Stream {
  id                  String   @id @default(uuid())
  name                String
  thumbnailUrl        String?
  ingressId           String?  @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  egresses            Egress[]
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ingressId])
}

model Egress {
  id           String   @id @default(uuid())
  egressId     String   @unique
  egressJson   Json?
  audioTrackId String
  videoTrackId String
  streamId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hasEnded     Boolean
  stream       Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([egressId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String
  blocked   User   @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User   @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
